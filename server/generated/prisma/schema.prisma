// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            Int     @id @default(autoincrement())
  cognitoId         String  @unique
  username          String  @unique
  profilePictureUrl String?
  teamId            Int?

  authoredTasks   Task[]           @relation("TaskAuthor")
  assignedTask    Task[]           @relation("TaskAssignee")
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
  team            Team?            @relation(fields: [teamId], references: [id])
}

model Team {
  id                   Int    @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  ProjectManagerUserId Int?

  ProjectTeams ProjectTeam[]
  user         User[]
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  Description String?
  startDate   DateTime?
  endDate     DateTime?

  tasks       Task[]
  projectTeam ProjectTeam[]
}

model ProjectTeam {
  id        Int @id @default(autoincrement())
  teamId    Int
  projectId Int

  team    Team    @relation(fields: [teamId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fielUrl      String
  fileName     String?
  taskId       Int
  uploadedById Int

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int

  user User @relation(fields: [userId], references: [userId])
  task Task @relation(fields: [taskId], references: [id])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}

model Task {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  status        String?
  priority      String?
  tags          String?
  startDate     DateTime?
  dueDate       DateTime?
  points        Int?
  projectId     Int
  authorUserId  Int
  assigneUserId Int?

  project        Project          @relation(fields: [projectId], references: [id])
  authorId       User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assigneId      User?            @relation("TaskAssignee", fields: [assigneUserId], references: [userId])
  Attachment     Attachment[]
  TaskAssignment TaskAssignment[]
  Comment        Comment[]
}
